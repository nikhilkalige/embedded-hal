var searchIndex = {};
searchIndex["embedded_hal"] = {"doc":"A minimal Hardware Abstraction Layer (HAL) for embedded systems","items":[[4,"Direction","embedded_hal","Count direction",null,null],[13,"Downcounting","","3, 2, 1",0,null],[13,"Upcounting","","1, 2, 3",0,null],[0,"blocking","","Blocking API",null,null],[0,"spi","embedded_hal::blocking","Blocking SPI API",null,null],[5,"transfer","embedded_hal::blocking::spi","Transfers words to the slave, returns the words received from the slave",null,null],[8,"FullDuplex","","Blocking full duplex",null,null],[16,"Error","","An enumeration of SPI errors",1,null],[10,"transfer","","Sends `words` to the slave. Returns the `words` received from the slave",1,null],[10,"write","","Sends `words` to the slave, ignoring all the incoming words",1,null],[0,"digital","embedded_hal","Digital I/O",null,null],[8,"OutputPin","embedded_hal::digital","Single digital output pin",null,null],[10,"is_high","","Is the output pin high?",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_low","","Is the output pin low?",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_low","","Sets the pin low",2,{"inputs":[{"name":"self"}],"output":null}],[10,"set_high","","Sets the pin high",2,{"inputs":[{"name":"self"}],"output":null}],[0,"prelude","embedded_hal","The prelude is a collection of all the traits in this crate",null,null],[0,"serial","","Serial interface",null,null],[8,"Read","embedded_hal::serial","Read half of a serial interface",null,null],[16,"Error","","Read error",3,null],[10,"read","","Reads a single word from the serial interface",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Write","","Write half of a serial interface",null,null],[16,"Error","","Write error",4,null],[10,"write","","Writes a single word to the serial interface",4,{"inputs":[{"name":"self"},{"name":"word"}],"output":{"name":"result"}}],[10,"flush","","Ensures that none of the previously written words are still buffered",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"spi","embedded_hal","Serial Peripheral Interface",null,null],[3,"Mode","embedded_hal::spi","SPI mode",null,null],[12,"polarity","","Clock polarity",5,null],[12,"phase","","Clock phase",5,null],[4,"Polarity","","Clock polarity",null,null],[13,"IdleLow","","Clock signal low when idle",6,null],[13,"IdleHigh","","Clock signal high when idle",6,null],[4,"Phase","","Clock phase",null,null],[13,"CaptureOnFirstTransition","","Data in \"captured\" on the first clock transition",7,null],[13,"CaptureOnSecondTransition","","Data in \"captured\" on the second clock transition",7,null],[8,"FullDuplex","","Full duplex (master mode)",null,null],[16,"Error","","An enumeration of SPI errors",8,null],[10,"read","","Reads the word stored in the shift register",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"send","","Sends a word to the slave",8,{"inputs":[{"name":"self"},{"name":"word"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"polarity"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"polarity"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"phase"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"phase"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[8,"Capture","embedded_hal","Input capture",null,null],[16,"Error","","Enumeration of `Capture` errors",9,null],[16,"Channel","","Enumeration of channels that can be used with this `Capture` interface",9,null],[16,"Time","","A time unit that can be converted into a human time unit (e.g. seconds)",9,null],[16,"Capture","","The type of the value returned by `capture`",9,null],[10,"capture","","\"Waits\" for a transition in the capture `channel` and returns the value of counter at that instant",9,null],[10,"disable","","Disables a capture `channel`",9,null],[10,"enable","","Enables a capture `channel`",9,null],[10,"get_resolution","","Returns the current resolution",9,null],[10,"set_resolution","","Sets the resolution of the capture timer",9,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[8,"Pwm","","Pulse Width Modulation",null,null],[16,"Channel","","Enumeration of channels that can be used with this `Pwm` interface",10,null],[16,"Time","","A time unit that can be converted into a human time unit (e.g. seconds)",10,null],[16,"Duty","","Type for the `duty` methods",10,null],[10,"disable","","Disables a PWM `channel`",10,null],[10,"enable","","Enables a PWM `channel`",10,null],[10,"get_period","","Returns the current PWM period",10,null],[10,"get_duty","","Returns the current duty cycle",10,null],[10,"get_max_duty","","Returns the maximum duty cycle value",10,null],[10,"set_duty","","Sets a new duty cycle",10,null],[10,"set_period","","Sets a new PWM period",10,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[8,"PwmPin","","A single PWM channel / pin",null,null],[16,"Duty","","Type for the `duty` methods",11,null],[10,"disable","","Disables a PWM `channel`",11,{"inputs":[{"name":"self"}],"output":null}],[10,"enable","","Enables a PWM `channel`",11,{"inputs":[{"name":"self"}],"output":null}],[10,"get_duty","","Returns the current duty cycle",11,null],[10,"get_max_duty","","Returns the maximum duty cycle value",11,null],[10,"set_duty","","Sets a new duty cycle",11,null],[8,"Qei","","Quadrature encoder interface",null,null],[16,"Count","","The type of the value returned by `count`",12,null],[10,"count","","Returns the current pulse count of the encoder",12,null],[10,"direction","","Returns the count direction",12,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[8,"Timer","","Timer used for timeouts",null,null],[16,"Time","","A time unit that can be converted into a human time unit (e.g. seconds)",13,null],[10,"get_timeout","","Returns the current timeout",13,null],[10,"pause","","Pauses the timer",13,{"inputs":[{"name":"self"}],"output":null}],[10,"restart","","Restarts the timer count to zero",13,{"inputs":[{"name":"self"}],"output":null}],[10,"resume","","Resumes the timer count",13,{"inputs":[{"name":"self"}],"output":null}],[10,"set_timeout","","Sets a new timeout",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"wait","","\"Waits\" until the timer times out",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}]],"paths":[[4,"Direction"],[8,"FullDuplex"],[8,"OutputPin"],[8,"Read"],[8,"Write"],[3,"Mode"],[4,"Polarity"],[4,"Phase"],[8,"FullDuplex"],[8,"Capture"],[8,"Pwm"],[8,"PwmPin"],[8,"Qei"],[8,"Timer"]]};
searchIndex["nb"] = {"doc":"Minimal and reusable non-blocking I/O layer","items":[[4,"Error","nb","A non-blocking error",null,null],[13,"Other","","A different kind of error",0,null],[13,"WouldBlock","","This operation requires blocking behavior to complete",0,null],[6,"Result","","A non-blocking result",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"await","","Await operation (won't work until the language gains support for generators)",null,null],[14,"block","","Turns the non-blocking expression `$e` into a blocking operation.",null,null],[14,"try_nb","","Future adapter",null,null]],"paths":[[4,"Error"]]};
initSearch(searchIndex);
